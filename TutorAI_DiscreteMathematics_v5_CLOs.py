# change for gemini-2.0-flash
import os
import streamlit as st
import requests
from dotenv import load_dotenv
import fitz  # = PyMuPDF
import io
import re
import streamlit.components.v1 as components
import docx #d√πng ƒë·ªÉ ƒë·ªçc file ng∆∞·ªùi d√πng upload l√™n
from bs4 import BeautifulSoup
import streamlit.components.v1 as components
from streamlit_javascript import st_javascript
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import tempfile
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

#from gtts import gTTS #for audio
import edge_tts #AI audio
import asyncio  #AI audio 

import base64
import uuid
import os

from firebase_config import init_firestore
from firebase_admin import firestore  # ‚ú® Th√™m d√≤ng n√†y ·ªü ƒë·∫ßu file ch√≠nh

db = init_firestore()

from datetime import datetime
from google.cloud.firestore_v1 import ArrayUnion

#H√†m 1: Kh·ªüi t·∫°o d·ªØ li·ªáu ti·∫øn ƒë·ªô h·ªçc
def init_lesson_progress(all_parts):
    """
    T·∫°o danh s√°ch lesson_progress t·ª´ all_parts, th√™m tr·∫°ng th√°i m·∫∑c ƒë·ªãnh.
    """
    lesson_progress = []
    for part in all_parts:
        lesson_progress.append({
            "id": part["id"],
            "loai": part["loai"],
            "tieu_de": part["tieu_de"],
            "noi_dung": part["noi_dung"],
            "trang_thai": "chua_hoan_thanh",  # m·∫∑c ƒë·ªãnh
            "diem_so": 0  # m·∫∑c ƒë·ªãnh
        })
    st.session_state["lesson_progress"] = lesson_progress

#H√†m 2: L∆∞u ti·∫øn ƒë·ªô h·ªçc ra file JSON
def save_lesson_progress(filename="tien_do_bai_hoc.json"):
    """
    L∆∞u lesson_progress hi·ªán t·∫°i th√†nh file JSON ƒë·ªÉ t·∫£i v·ªÅ.
    """
    if "lesson_progress" in st.session_state:
        json_data = json.dumps(st.session_state["lesson_progress"], ensure_ascii=False, indent=2)
        st.download_button(
            label="üì• T·∫£i file ti·∫øn ƒë·ªô (.json)",
            data=json_data,
            file_name=filename,
            mime="application/json"
        )
    else:
        st.warning("‚ö†Ô∏è Ch∆∞a c√≥ ti·∫øn ƒë·ªô h·ªçc n√†o ƒë·ªÉ l∆∞u.")

#H√†m 3: C·∫≠p nh·∫≠t tr·∫°ng th√°i sau m·ªói ph·∫ßn h·ªçc
def update_progress(part_id, trang_thai="hoan_thanh", diem_so=100):
    """
    C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† ƒëi·ªÉm s·ªë cho m·ªôt ph·∫ßn h·ªçc theo ID.
    """
    if "lesson_progress" not in st.session_state:
        st.warning("‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu ti·∫øn ƒë·ªô ƒë·ªÉ c·∫≠p nh·∫≠t.")
        return

    for item in st.session_state["lesson_progress"]:
        if item["id"] == part_id:
            item["trang_thai"] = trang_thai
            item["diem_so"] = diem_so
            break
#t·ª± ƒë·ªông nh·∫≠n di·ªán lo·∫°i n·ªôi dung:
def tach_noi_dung_bai_hoc_tong_quat(file_path):
    doc = fitz.open(file_path)
    toc = doc.get_toc()

    pages_text = [page.get_text("text") for page in doc]
    results = []

    # Ph√¢n lo·∫°i ph·∫ßn
    def classify_section(title):
        title_upper = title.upper()
        if "PH·∫¶N 1:" in title_upper:
            return 'ly_thuyet'
        elif "PH·∫¶N 2:" in title_upper:
            return 'bai_tap_co_giai'
        elif "PH·∫¶N 3:" in title_upper:
            return 'trac_nghiem'
        elif "PH·∫¶N 4:" in title_upper:
            return 'luyen_tap'
        elif "PH·∫¶N 5:" in title_upper:
            return 'du_an'
        else:
            return None  # Kh√¥ng thay ƒë·ªïi n·∫øu kh√¥ng ph·∫£i ti√™u ƒë·ªÅ ph·∫ßn ch√≠nh

    current_section = None

    def make_id(loai, stt):
        prefix = {
            'ly_thuyet': 'LYTHUYET',
            'bai_tap_co_giai': 'BAITAPCOGIAI',
            'trac_nghiem': 'TRACNGHIEM',
            'luyen_tap': 'LUYENTAP',
            'du_an': 'DUAN',
            'khac': 'KHAC'
        }.get(loai, 'KHAC')
        return f"{prefix}_{stt}"

    def clean_text(text):
        import re
        text = re.sub(r'Page \d+ of \d+', '', text)
        return text.strip()

    for idx, (level, title, page_num) in enumerate(toc):
        page_idx = page_num - 1
        start_text = pages_text[page_idx]
        
        extracted_text = start_text  # T·∫°m th·ªùi, ƒë·ªÉ tr√°nh l·ªói
        
        new_section = classify_section(title)
        if new_section:
            current_section = new_section

        loai = current_section if current_section else 'khac'
        id_ = make_id(loai, idx + 1)

        results.append({
            'id': id_,
            'loai': loai,
            'tieu_de': title.strip(),
            'noi_dung': clean_text(extracted_text)
        })

    return results

def generate_and_encode_audio(text, voice="vi-VN-HoaiMyNeural"):
    """
    Sinh file audio t·ª´ vƒÉn b·∫£n, encode base64 ƒë·ªÉ nh√∫ng HTML
    """
    import edge_tts
    import asyncio
    import base64
    import uuid
    import os

    async def _generate_audio(text, filename, voice):
        communicate = edge_tts.Communicate(text, voice)
        await communicate.save(filename)

    temp_filename = f"temp_{uuid.uuid4().hex}.mp3"
    asyncio.run(_generate_audio(text, temp_filename, voice))

    with open(temp_filename, "rb") as f:
        audio_bytes = f.read()
        b64 = base64.b64encode(audio_bytes).decode()

    os.remove(temp_filename)
    return b64
    
def save_exchange_to_firestore(user_id, lesson_source, question, answer, session_id):
    doc_id = f"{user_id}_{lesson_source.replace('::', '_')}_{session_id}"
    doc_ref = db.collection("sessions").document(doc_id)

    # T·∫°o document n·∫øu ch∆∞a t·ªìn t·∫°i (KH√îNG g√°n answer_history ·ªü ƒë√¢y)
    doc_ref.set({
        "user_id": user_id,
        "lesson_source": lesson_source,
        "session_id": session_id,
        "timestamp": firestore.SERVER_TIMESTAMP
    }, merge=True)

    # Append v√†o m·∫£ng answer_history
    doc_ref.update({
        "answer_history": firestore.ArrayUnion([{
            "question": question,
            "answer": answer,
            "timestamp": datetime.utcnow()
        }])
    })

# ƒê·∫£m b·∫£o st.set_page_config l√† l·ªánh ƒë·∫ßu ti√™n
# Giao di·ªán Streamlit
st.set_page_config(page_title="Tutor AI", page_icon="üéì")
if "firebase_enabled" not in st.session_state:
    st.session_state["firebase_enabled"] = True # False  # ho·∫∑c True n·∫øu mu·ªën m·∫∑c ƒë·ªãnh b·∫≠t
    
import uuid
import time

if "session_id" not in st.session_state:
    # d√πng timestamp ho·∫∑c uuid ng·∫Øn g·ªçn
    st.session_state["session_id"] = f"{int(time.time())}"  # ho·∫∑c uuid.uuid4().hex[:8]

if "user_id" not in st.session_state:
    st.session_state["user_id"] = f"user_{uuid.uuid4().hex[:8]}"
    
#m·ªü l·∫°i danh s√°ch c√°c b√†i h·ªçc
st.session_state["show_sidebar_inputs"] = True

uploaded_files = []  # ‚úÖ ƒë·∫£m b·∫£o bi·∫øn t·ªìn t·∫°i trong m·ªçi tr∆∞·ªùng h·ª£p

input_key = st.session_state.get("GEMINI_API_KEY", "")

# L·∫•y t·ª´ localStorage
key_from_local = st_javascript("JSON.parse(window.localStorage.getItem('gemini_api_key') || '\"\"')")

# N·∫øu ch∆∞a c√≥ th√¨ g√°n
if not input_key and key_from_local:
    st.session_state["GEMINI_API_KEY"] = key_from_local
    input_key = key_from_local

@st.cache_data
def load_available_lessons_from_txt(url):
    try:
        #response = requests.get(url)
        response = requests.get(url, allow_redirects=True)
        if response.status_code == 200:
            lines = response.text.strip().splitlines()
            lessons = {"üëâ Ch·ªçn b√†i h·ªçc...": ""}
            for line in lines:
                if "|" in line:
                    name, link = line.split("|", 1)
                    lessons[name.strip()] = link.strip()
            return lessons
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†i h·ªçc t·ª´ GitHub.")
            return {"üëâ Ch·ªçn b√†i h·ªçc...": ""}
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc danh s√°ch b√†i h·ªçc: {e}")
        return {"üëâ Ch·ªçn b√†i h·ªçc...": ""}
        
LESSON_LIST_URL = "https://raw.githubusercontent.com/tranthanhthangbmt/AITutor_Gemini/main/Data/DiscreteMathematicsLesson3.txt"  
available_lessons = load_available_lessons_from_txt(LESSON_LIST_URL) 

def clean_html_to_text(text):
    soup = BeautifulSoup(text, "html.parser")
    return soup.get_text()
    
def format_mcq_options(text):
    """
    T√°ch c√°c l·ª±a ch·ªçn A. B. C. D. th√†nh d√≤ng ri√™ng bi·ªát ‚Äì k·ªÉ c·∫£ khi b·ªã d√≠nh li·ªÅn c√¢u h·ªèi ho·∫∑c d√≠nh nhau.
    """
    # X·ª≠ l√Ω A. B. C. D. (ch√®n \n tr∆∞·ªõc n·∫øu ch∆∞a c√≥)
    text = re.sub(r'\s*A\.', r'\nA.', text)
    text = re.sub(r'\s*B\.', r'\nB.', text)
    text = re.sub(r'\s*C\.', r'\nC.', text)
    text = re.sub(r'\s*D\.', r'\nD.', text)
    return text
    
def extract_text_from_uploaded_file(uploaded_file):
    if uploaded_file is None:
        return ""

    file_type = uploaded_file.name.split(".")[-1].lower()
    try:
        if file_type == "pdf":
            with fitz.open(stream=uploaded_file.read(), filetype="pdf") as doc:
                return "\n".join(page.get_text() for page in doc)
        elif file_type == "txt":
            return uploaded_file.read().decode("utf-8")
        elif file_type == "docx":
            doc = docx.Document(uploaded_file)
            return "\n".join([para.text for para in doc.paragraphs])
        else:
            return "‚ùå ƒê·ªãnh d·∫°ng kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£."
    except Exception as e:
        return f"‚ùå L·ªói ƒë·ªçc file: {e}"

# X√°c th·ª±c API b·∫±ng request test
def is_valid_gemini_key(key):
    try:
        test_response = requests.post(
            GEMINI_API_URL,
            headers={"Content-Type": "application/json"},
            params={"key": key},
            json={"contents": [{"parts": [{"text": "hello"}]}]},
            timeout=5
        )
        return test_response.status_code == 200
    except Exception:
        return False

#thi·∫øt l·∫≠p ·∫©n ph·∫ßn b√†i h·ªçc
if "show_sidebar_inputs" not in st.session_state:
    st.session_state["show_sidebar_inputs"] = True  # ‚Üê b·∫≠t m·∫∑c ƒë·ªãnh
    
# ‚¨á L·∫•y input t·ª´ ng∆∞·ªùi d√πng ·ªü sidebar tr∆∞·ªõc
with st.sidebar:
    st.markdown("""
    <style>
    /* ·∫®n ho√†n to√†n iframe t·∫°o b·ªüi st_javascript (v·∫´n ho·∫°t ƒë·ªông, ch·ªâ kh√¥ng chi·∫øm kh√¥ng gian) */
    iframe[title="streamlit_javascript.streamlit_javascript"] {
        display: none !important;
    }
    
    /* ·∫®n container ch·ª©a iframe (ch√≠nh l√† div t·∫°o kho·∫£ng tr·ªëng) */
    div[data-testid="stCustomComponentV1"] {
        display: none !important;
    }
    </style>
    """, unsafe_allow_html=True)
    
    #for logo
    # Thay link n√†y b·∫±ng logo th·∫≠t c·ªßa b·∫°n (link raw t·ª´ GitHub)
    logo_url = "https://raw.githubusercontent.com/tranthanhthangbmt/AITutor_Gemini/main/LOGO_UDA_2023_VN_EN_chuan2.png"

    st.sidebar.markdown(
        f"""
        <div style='text-align: center; margin-bottom: 10px;'>
            <img src="{logo_url}" width="200" style="border-radius: 10px;" />
        </div>
        """,
        unsafe_allow_html=True
    )

    # üìå L·ª±a ch·ªçn ch·∫ø ƒë·ªô nh·∫≠p b√†i h·ªçc
    #cho upload file tr∆∞·ªõc
    #mode = st.radio("üìò Ch·∫ø ƒë·ªô nh·∫≠p b√†i h·ªçc:", ["T·∫£i l√™n th·ªß c√¥ng", "Ch·ªçn t·ª´ danh s√°ch"])
    #ch·ªçn b√†i h·ªçc tr∆∞·ªõc
    mode = st.radio(
        "üìò Ch·∫ø ƒë·ªô nh·∫≠p b√†i h·ªçc:", 
        ["T·∫£i l√™n th·ªß c√¥ng", "Ch·ªçn t·ª´ danh s√°ch"],
        index=1  # ‚úÖ M·∫∑c ƒë·ªãnh ch·ªçn "T·∫£i l√™n th·ªß c√¥ng"
    )
    st.session_state["show_sidebar_inputs"] = (mode == "Ch·ªçn t·ª´ danh s√°ch")

    # ‚úÖ Nh√∫ng script JS duy nh·∫•t ƒë·ªÉ t·ª± ƒë·ªông ƒëi·ªÅn & l∆∞u API key
    key_from_local = st_javascript("""
    (() => {
        const inputEl = window.parent.document.querySelector('input[data-testid="stTextInput"][type="password"]');
        const storedKey = localStorage.getItem("gemini_api_key");
    
        // T·ª± ƒë·ªông ƒëi·ªÅn n·∫øu textbox r·ªóng
        if (inputEl && storedKey && inputEl.value === "") {
            inputEl.value = JSON.parse(storedKey);
            inputEl.dispatchEvent(new Event("input", { bubbles: true }));
        }
    
        // L∆∞u khi ng∆∞·ªùi d√πng nh·∫≠p
        const saveAPI = () => {
            if (inputEl && inputEl.value) {
                localStorage.setItem("gemini_api_key", JSON.stringify(inputEl.value));
            }
        };
        inputEl?.addEventListener("blur", saveAPI);
        inputEl?.addEventListener("change", saveAPI);
        inputEl?.addEventListener("keydown", e => {
            if (e.key === "Enter") saveAPI();
        });
    
        return storedKey ? JSON.parse(storedKey) : "";
    })()
    """)
    
    # ‚úÖ ∆Øu ti√™n l·∫•y t·ª´ localStorage n·∫øu session ch∆∞a c√≥
    input_key = st.session_state.get("GEMINI_API_KEY", "")
    if not input_key and key_from_local:
        st.session_state["GEMINI_API_KEY"] = key_from_local
        input_key = key_from_local
    
    # ‚úÖ T·∫°o textbox v·ªõi gi√° tr·ªã ƒë√∫ng
    input_key = st.text_input("üîë Gemini API Key", value=input_key, type="password", key="GEMINI_API_KEY")

    # üîÑ Ch·ªçn m√¥ h√¨nh Gemini
    model_options = {
        "‚ö° Gemini 2.0 Flash": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
        "‚ö° Gemini 1.5 Flash": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent",
        "üß† Gemini 1.5 Pro": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent",
        "üß† Gemini 2.5 Pro Preview": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-preview-03-25:generateContent",
        "üñºÔ∏è Gemini 1.5 Pro Vision (·∫£nh + ch·ªØ)": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-vision:generateContent"
    }
    
    # ‚úÖ Hi·ªÉn th·ªã selectbox
    selected_model_name = st.selectbox("ü§ñ Ch·ªçn m√¥ h√¨nh Gemini", list(model_options.keys()), index=0)
    
    # ‚úÖ G√°n URL t∆∞∆°ng ·ª©ng v√†o session_state (ƒë·ªÉ d√πng sau)
    st.session_state["GEMINI_API_URL"] = model_options[selected_model_name]

    st_javascript("""
    (() => {
        const inputEl = window.parent.document.querySelector('input[data-testid="stTextInput"][type="password"]');
        const storedKey = localStorage.getItem("gemini_api_key");
    
        // T·ª± ƒëi·ªÅn n·∫øu c√≤n tr·ªëng
        const tryFillKey = () => {
            if (inputEl && storedKey && inputEl.value.trim() === "") {
                inputEl.value = JSON.parse(storedKey);
                inputEl.dispatchEvent(new Event("input", { bubbles: true }));
                console.log("‚úÖ T·ª± ƒë·ªông ƒëi·ªÅn API t·ª´ localStorage.");
            }
        };
    
        tryFillKey();  // g·ªçi ngay khi ch·∫°y
        const interval = setInterval(tryFillKey, 1000); // ki·ªÉm tra l·∫°i m·ªói gi√¢y
    
        // L∆∞u khi thay ƒë·ªïi
        const saveAPI = () => {
            if (inputEl && inputEl.value) {
                localStorage.setItem("gemini_api_key", JSON.stringify(inputEl.value));
                console.log("üíæ ƒê√£ l∆∞u API v√†o localStorage.");
            }
        };
    
        inputEl?.addEventListener("change", saveAPI);
        inputEl?.addEventListener("blur", saveAPI);
        inputEl?.addEventListener("keydown", (e) => {
            if (e.key === "Enter") saveAPI();
        });
    })();
    """)
    "[L·∫•y API key t·∫°i ƒë√¢y](https://aistudio.google.com/app/apikey)"
    # üîä Cho ph√©p b·∫≠t/t·∫Øt t·ª± ƒë·ªông ph√°t audio
    enable_audio_default = True  # ‚úÖ M·∫∑c ƒë·ªãnh: B·∫≠t nghe audio
    st.session_state["enable_audio_playback"] = st.sidebar.checkbox("üîä T·ª± ƒë·ªông ph√°t √¢m thanh", value=enable_audio_default)
    if st.session_state.get("show_sidebar_inputs", False):
        st.markdown("üìö **Ch·ªçn b√†i h·ªçc ho·∫∑c t·∫£i l√™n b√†i h·ªçc**")
        
        selected_lesson = st.selectbox("üìñ Ch·ªçn b√†i h·ªçc", list(available_lessons.keys()))
        default_link = available_lessons[selected_lesson]
        selected_lesson_link = available_lessons.get(selected_lesson, "").strip()
        
        if selected_lesson != "üëâ Ch·ªçn b√†i h·ªçc..." and selected_lesson_link:
            st.markdown(f"üîó **T√†i li·ªáu:** [Xem b√†i h·ªçc]({selected_lesson_link})", unsafe_allow_html=True)
    else:
        # uploaded_file = None #b·ªè v√¨ b·∫°n c√≥ th·ªÉ x√≥a d√≤ng n√†y n·∫øu ƒë√£ chuy·ªÉn sang uploaded_files:
        selected_lesson = "üëâ Ch·ªçn b√†i h·ªçc..."        
        selected_lesson_link = "" #available_lessons.get(selected_lesson, "").strip() """
        uploaded_files = st.file_uploader(
            "üì§ T·∫£i l√™n nhi·ªÅu file b√†i h·ªçc (PDF, TXT, DOCX)", 
            type=["pdf", "txt", "docx"], 
            accept_multiple_files=True,
            key="file_uploader_thutay"  # üîë ƒë·∫∑t key ri√™ng cho ch·∫ø ƒë·ªô th·ªß c√¥ng
        )

        # Ki·ªÉm tra s·ªë file v√† k√≠ch th∆∞·ªõc t·ªïng c·ªông
        MAX_FILE_COUNT = 3
        MAX_TOTAL_SIZE_MB = 5
        
        if uploaded_files:
            total_size = sum(file.size for file in uploaded_files) / (1024 * 1024)
            if len(uploaded_files) > MAX_FILE_COUNT:
                st.warning(f"‚ö†Ô∏è Ch·ªâ n√™n t·∫£i t·ªëi ƒëa {MAX_FILE_COUNT} file.")
            elif total_size > MAX_TOTAL_SIZE_MB:
                st.warning(f"‚ö†Ô∏è T·ªïng dung l∆∞·ª£ng file v∆∞·ª£t qu√° {MAX_TOTAL_SIZE_MB}MB.")

    default_link = available_lessons[selected_lesson]
    # üì§ T·∫£i file t√†i li·ªáu (m·ª•c ti√™u l√† ƒë·∫∑t b√™n d∆∞·ªõi link)
    #uploaded_file = None  # Kh·ªüi t·∫°o tr∆∞·ªõc ƒë·ªÉ d√πng ƒëi·ªÅu ki·ªán b√™n tr√™n
    
    # üîó Hi·ªÉn th·ªã link NGAY B√äN D∆Ø·ªöI selectbox, n·∫øu th·ªèa ƒëi·ªÅu ki·ªán
    #if selected_lesson != "üëâ Ch·ªçn b√†i h·ªçc..." and selected_lesson_link:
    #    st.markdown(f"üîó **T√†i li·ªáu:** [Xem b√†i h·ªçc]({selected_lesson_link})", unsafe_allow_html=True)
    
    # ‚úÖ N·∫øu ng∆∞·ªùi d√πng upload t√†i li·ªáu ri√™ng ‚Üí ·∫©n link (t·ª´ v√≤ng sau tr·ªü ƒëi)
    if uploaded_files:
        # C√≥ th·ªÉ xo√° d√≤ng link b·∫±ng session ho·∫∑c kh√¥ng hi·ªÉn th·ªã ·ªü c√°c ph·∫ßn sau
        pass
    #hi·ªÉn th·ªã danh s√°ch c√°c files ƒë√£ upload l√™n
    if uploaded_files:
        st.markdown("üìÑ **C√°c file ƒë√£ t·∫£i l√™n:**")
        for f in uploaded_files:
            st.markdown(f"- {f.name}")

    #st.session_state["firebase_enabled"] = st.checkbox("üíæ L∆∞u d·ªØ li·ªáu l√™n Firebase", value=st.session_state["firebase_enabled"])
    st.session_state["firebase_enabled"] = True
    
    #L∆∞u ti·∫øn ƒë·ªô h·ªçc ra file JSON
    if st.button("üíæ L∆∞u ti·∫øn ƒë·ªô h·ªçc"):
        save_lesson_progress()
	
    # üîÑ N√∫t reset
    if st.button("üîÑ B·∫Øt ƒë·∫ßu l·∫°i bu·ªïi h·ªçc"):
        if "messages" in st.session_state:
            del st.session_state.messages
        if "lesson_loaded" in st.session_state:
            del st.session_state.lesson_loaded
        st.rerun()

    #L∆∞u ti·∫øn ƒë·ªô h·ªçc ra file JSON
    if st.button("üíæ L∆∞u ti·∫øn ƒë·ªô h·ªçc"):
        save_lesson_progress()
    
	#nh·∫•n n√∫t k·∫øt th√∫c bu·ªïi h·ªçc
    with st.expander("üì• K·∫øt th√∫c bu·ªïi h·ªçc"):
        if st.button("‚úÖ K·∫øt xu·∫•t n·ªôi dung bu·ªïi h·ªçc th√†nh file .txt v√† PDF"):
            if st.session_state.get("messages"):
                output_text = ""
                for msg in st.session_state.messages[1:]:  # b·ªè prompt h·ªá th·ªëng
                    role = "H·ªçc sinh" if msg["role"] == "user" else "Gia s∆∞ AI"
                    text = msg["parts"][0]["text"]
                    output_text += f"\n[{role}]:\n{text}\n\n"
        
                # ‚úÖ File name base
                lesson_title_safe = st.session_state.get("lesson_source", "BaiHoc_AITutor")
                lesson_title_safe = lesson_title_safe.replace("upload::", "").replace("lesson::", "").replace(" ", "_").replace(":", "")
                txt_file_name = f"BuoiHoc_{lesson_title_safe}.txt"
                pdf_file_name = f"BuoiHoc_{lesson_title_safe}.pdf"
        
                # ‚úÖ N√∫t t·∫£i .txt
                st.download_button(
                    label="üìÑ T·∫£i file .txt",
                    data=output_text,
                    file_name=txt_file_name,
                    mime="text/plain"
                )

                # ƒêƒÉng k√Ω font h·ªó tr·ª£ Unicode
                pdfmetrics.registerFont(TTFont("DejaVu", "fonts/DejaVuSans.ttf"))
        
                # ‚úÖ T·∫°o file PDF t·∫°m
                with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_pdf:
                    c = canvas.Canvas(tmp_pdf.name, pagesize=letter)
                    c.setFont("DejaVu", 12)  # d√πng font Unicode
                
                    width, height = letter
                    margin = 50
                    y = height - margin
                    lines = output_text.split("\n")
                
                    for line in lines:
                        line = line.strip()
                        if y < margin:
                            c.showPage()
                            c.setFont("DejaVu", 12)
                            y = height - margin
                        c.drawString(margin, y, line)
                        y -= 16
                
                    c.save()
        
                    # ƒê·ªçc l·∫°i file ƒë·ªÉ t·∫£i v·ªÅ
                    with open(tmp_pdf.name, "rb") as f:
                        pdf_bytes = f.read()
        
                    st.download_button(
                        label="üìï T·∫£i file .pdf",
                        data=pdf_bytes,
                        file_name=pdf_file_name,
                        mime="application/pdf"
                    )
            else:
                st.warning("‚ö†Ô∏è Ch∆∞a c√≥ n·ªôi dung ƒë·ªÉ k·∫øt xu·∫•t.")
    
st.title("üéì Tutor AI")

# Nh√∫ng script MathJax
mathjax_script = """
<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>
"""

st.markdown(mathjax_script, unsafe_allow_html=True)

def convert_to_mathjax(text):
    import re

    def is_inline_math(expr):
        math_keywords = ["=", "!", r"\times", r"\div", r"\cdot", r"\frac", "^", "_", 
                         r"\ge", r"\le", r"\neq", r"\binom", "C(", "C_", "n", "k"]
        return any(kw in expr for kw in math_keywords)

    def wrap_inline(match):
        expr = match.group(1).strip()
        return f"\\({expr}\\)" if is_inline_math(expr) else match.group(0)

    # X·ª≠ l√Ω inline: ( ... ) ‚Üí \( ... \)
    text = re.sub(r"\(([^()]+)\)", wrap_inline, text)
    return text

def convert_to_mathjax1(text):
    import re

    # 1. Nh·ªØng bi·ªÉu th·ª©c ƒë√£ ƒë∆∞·ª£c b·ªçc b·ªüi \(..\), \[..\], $$..$$ ‚Üí gi·ªØ nguy√™n
    protected_patterns = [
        r"\\\([^\(\)]+?\\\)",  # \( ... \)
        r"\\\[[^\[\]]+?\\\]",  # \[ ... \]
        r"\$\$[^\$]+\$\$",     # $$ ... $$
        r"`[^`]+?`",           # inline code block
    ]

    def protect_existing(expr):
        return re.sub('|'.join(protected_patterns), lambda m: f"{{{{PROTECTED:{m.group(0)}}}}}", expr)

    def restore_protected(expr):
        return re.sub(r"\{\{PROTECTED:(.+?)\}\}", lambda m: m.group(1), expr)

    def is_math_expression(expr):
        math_keywords = ["=", "!", r"\times", r"\div", r"\cdot", r"\frac", "^", "_", 
                         r"\ge", r"\le", r"\neq", r"\binom", "C(", "C_", "n!", "A_", "C_"]
        return any(kw in expr for kw in math_keywords)

    def wrap_likely_math(match):
        expr = match.group(0)
        stripped = expr.strip()
        if is_math_expression(stripped):
            return f"\\({stripped}\\)"
        return expr

    # Step 1: B·∫£o v·ªá c√°c ƒëo·∫°n ƒë√£ c√≥ c√¥ng th·ª©c ƒë√∫ng
    text = protect_existing(text)

    # Step 2: T√¨m v√† b·ªçc nh·ªØng bi·ªÉu th·ª©c d·∫°ng ch∆∞a ƒë∆∞·ª£c b·ªçc (c√≥ d·∫•u ngo·∫∑c ho·∫∑c d·∫•u =) c√≥ ch·ª©a k√Ω hi·ªáu to√°n h·ªçc
    # V√≠ d·ª•: n! = n √ó (n-1) √ó ... √ó 2 √ó 1 ‚Üí to√†n b·ªô s·∫Ω ƒë∆∞·ª£c b·ªçc
    text = re.sub(r"(?<!\\)(\b[^()\n]{1,50}\([^()]+\)[^()\n]{0,50})", wrap_likely_math, text)

    # Step 3: Restore l·∫°i c√°c bi·ªÉu th·ª©c ƒë√£ ƒë√∫ng ƒë·ªãnh d·∫°ng
    text = restore_protected(text)

    return text

	
def convert_parentheses_to_latex(text):
    """
    Chuy·ªÉn t·∫•t c·∫£ bi·ªÉu th·ª©c trong d·∫•u () th√†nh c√∫ ph√°p \( ... \) n·∫øu l√† bi·ªÉu th·ª©c to√°n h·ªçc.
    Bao g·ªìm c·∫£ c√°c bi·∫øn ƒë∆°n nh∆∞ (n), (k), (C(n, k))
    """
    def is_math_expression(expr):
        math_keywords = ["=", "!", r"\times", r"\div", r"\cdot", r"\frac", "^", "_", 
                         r"\ge", r"\le", r"\neq", r"\binom", "C(", "C_", "n", "k"]
        return any(keyword in expr for keyword in math_keywords) or re.fullmatch(r"[a-zA-Z0-9_+\-\*/\s\(\),]+", expr)

    # Thay t·∫•t c·∫£ (to√°n h·ªçc) => \( ... \)
    return re.sub(r"\(([^()]+)\)", 
                  lambda m: f"\\({m.group(1).strip()}\\)" if is_math_expression(m.group(1)) else m.group(0), 
                  text)
	
# Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()
#API_KEY = os.getenv("GEMINI_API_KEY")
# ∆Øu ti√™n: D√πng key t·ª´ ng∆∞·ªùi d√πng nh·∫≠p ‚ûù n·∫øu kh√¥ng c√≥ th√¨ d√πng t·ª´ m√¥i tr∆∞·ªùng
API_KEY = input_key or os.getenv("GEMINI_API_KEY")

# Ki·ªÉm tra
if not API_KEY:
    st.error("‚ùå Thi·∫øu Gemini API Key. Vui l√≤ng nh·∫≠p ·ªü sidebar ho·∫∑c thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng 'GEMINI_API_KEY'.")
    st.stop()

#input file b√†i h·ªçc
#if selected_lesson == "üëâ Ch·ªçn b√†i h·ªçc..." and uploaded_file is None:
if selected_lesson == "üëâ Ch·ªçn b√†i h·ªçc..." and not uploaded_files: #ki·ªÉm tra l√† ƒë√£ t·∫£i li√™n nhi·ªÅu file
    st.info("üì• H√£y t·∫£i l√™n t√†i li·ªáu PDF/TXT ho·∫∑c ch·ªçn m·ªôt b√†i h·ªçc t·ª´ danh s√°ch b√™n tr√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu.") 
    st.stop()

# Endpoint API Gemini
#GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent" 
#GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-preview-03-25:generateContent"
GEMINI_API_URL = st.session_state.get("GEMINI_API_URL", "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent")

#read file PDF
def extract_pdf_text_from_url(url):
    try:
        response = requests.get(url)
        if response.status_code != 200:
            return "‚ùå Kh√¥ng th·ªÉ t·∫£i t√†i li·ªáu PDF t·ª´ GitHub."

        with fitz.open(stream=io.BytesIO(response.content), filetype="pdf") as doc:
            text = ""
            for page in doc:
                text += page.get_text()
        return text
    except Exception as e:
        return f"L·ªói khi ƒë·ªçc PDF: {e}"

#PDF_URL = "https://raw.githubusercontent.com/tranthanhthangbmt/AITutor_Gemini/main/handoutBuoi4.pdf"
#pdf_context = extract_pdf_text_from_url(PDF_URL)
pdf_context = ""

# N·∫øu c√≥ file upload th√¨ l·∫•y n·ªôi dung t·ª´ file upload
if uploaded_files:
    pdf_context = ""
    for uploaded_file in uploaded_files:
        pdf_context += extract_text_from_uploaded_file(uploaded_file) + "\n"

# N·∫øu kh√¥ng c√≥ upload m√† ch·ªçn b√†i h·ªçc th√¨ t·∫£i n·ªôi dung t·ª´ link
elif selected_lesson != "üëâ Ch·ªçn b√†i h·ªçc..." and default_link.strip():
    pdf_context = extract_pdf_text_from_url(default_link)

# N·∫øu kh√¥ng c√≥ g√¨ h·∫øt th√¨ b√°o l·ªói
if not pdf_context:
    st.error("‚ùå B·∫°n c·∫ßn ph·∫£i upload t√†i li·ªáu ho·∫∑c ch·ªçn m·ªôt b√†i h·ªçc ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
    st.stop()

# Prompt h·ªá th·ªëng: Thi·∫øt l·∫≠p vai tr√≤ tutor AI

SYSTEM_PROMPT1 = r"""
# Vai tr√≤:
B·∫°n l√† m·ªôt gia s∆∞ AI chuy√™n nghi·ªáp, c√≥ nhi·ªám v·ª• h∆∞·ªõng d·∫´n h·ªçc sinh h·ªçc v·ªÅ "N·ªôi dung b√†i h·ªçc do b·∫°n nh·∫≠p v√†o". B·∫°n ph·∫£i ph·∫£n h·ªìi chi ti·∫øt, ƒë·∫∑t c√¢u h·ªèi g·ª£i m·ªü, ki·ªÉm tra ph·∫£n x·∫° v√† gi·∫£i th√≠ch d·ª±a tr√™n t√†i li·ªáu handout ƒë∆∞·ª£c cung c·∫•p.

# Math and Code Presentation Style:
    1. Default to Rendered LaTeX: Always use LaTeX for math. Use double dollar signs for display equations (equations intended to be on their own separate lines) and single dollar signs for inline math within text. Ensure math renders properly and not as raw code. Use the backslash-mathbf command for vectors where appropriate (e.g., for r). Formatting Display Math Within Lists: When a display math equation (using double dollar signs) belongs to a list item (like a numbered or bullet point), follow this specific structure: First, write the text part of the list item. Then, start the display math equation on a completely new line immediately following that text. Critically, this new line containing the display math equation MUST begin at the absolute start of the line, with ZERO leading spaces or any indentation. Explicitly, do NOT add spaces or tabs before the opening double dollar sign to visually align it with the list item's text. This strict zero-indentation rule for display math lines within lists is essential for ensuring correct rendering.
    2. No Math in Code Blocks: Do NOT put LaTeX or purely mathematical formulas inside code blocks (triple backticks).
    3. Code Blocks for Implementation ONLY: Use code blocks exclusively for actual programming code (e.g., Python, NumPy). Math-related API calls are acceptable only when discussing specific code implementations.
    4. Goal: Prioritize clean, readable, professional presentation resembling scientific documents. Ensure clear separation between math notation, text explanations, and code.
    5. Inline vs. Display for Brevity: Prefer inline math (`$ ... $`) for short equations fitting naturally in text to improve readability and flow. Reserve display math (`$$ ... $$`) for longer/complex equations or those requiring standalone emphasis.
    6. Spacing After Display Math: For standard paragraph separation after display math (`$$...$$`), ensure exactly one blank line (two newlines in Markdown source) exists between the closing `$$` line and the subsequent paragraph text.
	7. After rendering with MathJax, review all math expressions. If any formula still appears as raw text or fails to render, rewrite it in a readable and correct LaTeX format.
    8. Prefer inline math (`$...$`, `\(...\)`) for short expressions. Use display math (`$$...$$`, `\[...\]`) for complex or emphasized expressions needing standalone display.
    9. Include support for additional math delimiters such as \(...\), \\(...\\), and superscripts like ^, as commonly used in MathJax and LaTeX.
    10. Avoid mixing different math delimiters in the same expression. For example, the input "\(mx + p\)\\(nx + q\\) = 0" uses both \(...\) and \\(...\\), which is incorrect. Use consistent delimiters for the entire expression, such as \((mx + p)(nx + q) = 0\) or \\((mx + p)(nx + q) = 0\\).
"""

# üîπ Vai tr√≤ m·∫∑c ƒë·ªãnh c·ªßa Tutor AI (tr∆∞·ªõc khi c√≥ t√†i li·ªáu)
SYSTEM_PROMPT_Tutor_AI = f"""
# Vai tr√≤:
    - B·∫°n ƒë∆∞·ª£c thi·∫øt l·∫≠p l√† m·ªôt gia s∆∞ AI chuy√™n nghi·ªáp, c√≥ nhi·ªám v·ª• h∆∞·ªõng d·∫´n t√¥i hi·ªÉu r√µ v·ªÅ [B√†i to√°n ƒë·∫øm trong Nguy√™n l√Ω dirichlet, C√°c c·∫•u h√¨nh t·ªï h·ª£p]. H√£y ƒë√≥ng vai tr√≤ l√† m·ªôt tutor c√≥ kinh nghi·ªám, ƒë·∫∑t c√¢u h·ªèi g·ª£i m·ªü, h∆∞·ªõng d·∫´n chi ti·∫øt t·ª´ng b∆∞·ªõc, v√† cung c·∫•p b√†i t·∫≠p th·ª±c h√†nh gi√∫p t√¥i c·ªßng c·ªë ki·∫øn th·ª©c. D·ª±a tr√™n t·∫≠p tin ƒë√≠nh k√®m ch·ª©a chi ti·∫øt b√†i h·ªçc, tr·∫Øc nghi·ªám, b√†i th·ª±c h√†nh v√† b√†i d·ª± √°n, h√£y cƒÉn c·ª© tr√™n n·ªôi dung c·ªßa file ƒë√≠nh k√®m ƒë√≥ ƒë·ªÉ h∆∞·ªõng d·∫´n. Sau ƒë√¢y l√† c√°c th√¥ng tin c·ªßa n·ªôi dung b√†i h·ªçc v√† c√°c h√†nh vi c·ªßa gia s∆∞:

# M·ª•c ti√™u ch√≠nh c·ªßa gia s∆∞ AI:
	- B√°m s√°t t√†i li·ªáu ƒë√≠nh k√®m.
	- H∆∞·ªõng d·∫´n ho√†n th√†nh m·ªçi ph·∫ßn trong bu·ªïi h·ªçc.
	- T·∫°o ƒë·ªông l·ª±c h·ªçc t·∫≠p b·∫±ng h·ªá th·ªëng ch·∫•m ƒëi·ªÉm.
	- Gi·ªØ th·ªùi l∆∞·ª£ng m·ªói ph·∫ßn t·ªëi thi·ªÉu 5 ph√∫t (nh·∫•t l√† ph·∫ßn vi·∫øt code, n·∫øu c√≥).
	- T·∫°o th√≥i quen chia s·∫ª ‚Äì h·ªá th·ªëng h√≥a ki·∫øn th·ª©c sau m·ªói bu·ªïi h·ªçc.

# C√°ch ch·∫•m ƒëi·ªÉm sau m·ªói c√¢u tr·∫£ l·ªùi:
	- ƒê√∫ng v√† ƒë·∫ßy ƒë·ªß: Nh·∫≠n ƒë·ªß ƒëi·ªÉm ph·∫ßn ƒë√≥.
	- C√≥ l·ªói nh·ªè nh∆∞ng v·∫´n b√°m s√°t n·ªôi dung: Nh·∫≠n 50‚Äì70% s·ªë ƒëi·ªÉm.
	- Sai ho·∫∑c thi·∫øu s√≥t nhi·ªÅu: Kh√¥ng nh·∫≠n ƒëi·ªÉm, s·∫Ω ƒë∆∞·ª£c h∆∞·ªõng d·∫´n l·∫°i.

# Tr∆∞·ªõc khi ƒë∆∞a ra ph·∫£n h·ªìi:
	- LU√îN y√™u c·∫ßu t√¥i t·ª± gi·∫£i th√≠ch l·∫°i n·ªôi dung tr∆∞·ªõc khi ph·∫£n h·ªìi.
	- TUY·ªÜT ƒê·ªêI KH√îNG ƒë∆∞·ª£c ƒë∆∞a ra l·ªùi gi·∫£i, gi·∫£i th√≠ch hay v√≠ d·ª• n·∫øu t√¥i ch∆∞a tr·∫£ l·ªùi.
	- Ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng n·ªôi dung c√≥ trong t√†i li·ªáu handout ƒë√≠nh k√®m. Kh√¥ng ƒë∆∞·ª£c ƒë∆∞a v√≠ d·ª•, ƒë·ªãnh nghƒ©a, b√†i t·∫≠p ho·∫∑c c√¢u h·ªèi ngo√†i ph·∫°m vi handout.
	- N·∫øu t√¥i kh√¥ng ph·∫£n h·ªìi, ch·ªâ ti·∫øp t·ª•c nh·∫Øc l·∫°i c√¢u h·ªèi ho·∫∑c ƒë∆∞a ra g·ª£i √Ω nh·∫π, KH√îNG ƒë∆∞·ª£c gi·∫£i th√≠ch thay.
	- Khi t√¥i ƒë√£ tr·∫£ l·ªùi, h√£y ƒë√°nh gi√°, ch·∫•m ƒëi·ªÉm, ch·ªâ ra l·ªói sai v√† h∆∞·ªõng d·∫´n d·ª±a tr√™n c√¢u tr·∫£ l·ªùi ƒë√≥.
	- Khi c·∫ßn d·∫´n ch·ª©ng ho·∫∑c y√™u c·∫ßu ƒë·ªçc th√™m, LU√îN ph·∫£i tr√≠ch d·∫´n ƒë√∫ng m·ª•c, ti√™u ƒë·ªÅ ho·∫∑c s·ªë trang trong handout (n·∫øu c√≥). KH√îNG ƒë∆∞·ª£c t·ª± suy di·ªÖn ho·∫∑c gi·ªõi thi·ªáu th√™m ngu·ªìn ngo√†i.
 	- N·∫øu ph√°t hi·ªán c√¢u tr·∫£ l·ªùi c·ªßa t√¥i ch·ª©a nh·∫ßm l·∫´n ho·∫∑c hi·ªÉu sai kh√°i ni·ªám, kh√¥ng ch·ªâ x√°c nh·∫≠n "ƒë√∫ng/g·∫ßn ƒë√∫ng/sai", m√† h√£y s·ª≠ d·ª•ng **chi·∫øn l∆∞·ª£c ph·∫£n h·ªìi ki·ªÉu Socratic**: n√™u r√µ ph·∫ßn hi·ªÉu sai, sau ƒë√≥ ƒë·∫∑t c√¢u h·ªèi ng∆∞·ª£c ƒë·ªÉ t√¥i t·ª± ƒëi·ªÅu ch·ªânh l·∫°i c√°ch hi·ªÉu c·ªßa m√¨nh. V√≠ d·ª•: ‚ÄúTrong c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n c√≥ √Ω n√≥i r·∫±ng *[ƒëi·ªÉm ch∆∞a ƒë√∫ng]* ‚Äî b·∫°n c√≥ th·ªÉ tra l·∫°i ph·∫ßn [t√™n m·ª•c trong handout] v√† th·ª≠ di·ªÖn gi·∫£i l·∫°i kh√¥ng?‚Äù
	- Tr√°nh ph·∫£n h·ªìi chung chung nh∆∞ ‚ÄúG·∫ßn ƒë√∫ng‚Äù ho·∫∑c ‚ÄúB·∫°n c·∫ßn xem l·∫°i‚Äù, m√† thay v√†o ƒë√≥ h√£y ch·ªâ r√µ **ch·ªó n√†o c·∫ßn xem l·∫°i**, d·ª±a tr√™n n·ªôi dung c·ªßa handout.
 	- N·∫øu nh·∫≠n th·∫•y t√¥i th∆∞·ªùng xuy√™n tr·∫£ l·ªùi b·∫±ng ƒëo·∫°n m√£ ho·∫∑c v√≠ d·ª• l·∫≠p tr√¨nh, h√£y ∆∞u ti√™n ph·∫£n h·ªìi theo h∆∞·ªõng **ki·ªÉm l·ªói, g·ª£i √Ω c·∫£i ti·∫øn m√£ v√† m·ªü r·ªông t√¨nh hu·ªëng ·ª©ng d·ª•ng**.  
	- N·∫øu t√¥i tr·∫£ l·ªùi thi√™n v·ªÅ l√Ω thuy·∫øt ho·∫∑c ƒë·ªãnh nghƒ©a, h√£y ph·∫£n h·ªìi b·∫±ng c√°ch **so s√°nh, y√™u c·∫ßu t√¥i l·∫•y v√≠ d·ª• minh h·ªça**, ho·∫∑c g·ª£i √Ω s∆° ƒë·ªì h√≥a kh√°i ni·ªám n·∫øu t√†i li·ªáu c√≥ h·ªó tr·ª£.  
	- T√πy theo phong c√°ch tr·∫£ l·ªùi, h√£y ƒëi·ªÅu ch·ªânh h∆∞·ªõng ph·∫£n h·ªìi ƒë·ªÉ ph√π h·ª£p v·ªõi xu h∆∞·ªõng h·ªçc c·ªßa t√¥i, nh∆∞ng lu√¥n ph·∫£i d·ª±a tr√™n n·ªôi dung handout ƒë√≠nh k√®m.  
	- V√≠ d·ª•:  
		- N·∫øu t√¥i vi·∫øt code, c√≥ th·ªÉ h·ªèi: ‚ÄúB·∫°n th·∫•y ƒëo·∫°n m√£ n√†y c√≥ th·ªÉ g√¢y l·ªói ·ªü ƒë√¢u n·∫øu thay ƒë·ªïi ƒë·∫ßu v√†o?‚Äù  
	  	- N·∫øu t√¥i gi·∫£i th√≠ch l√Ω thuy·∫øt, c√≥ th·ªÉ h·ªèi: ‚ÄúB·∫°n c√≥ th·ªÉ minh h·ªça b·∫±ng v√≠ d·ª• c·ª• th·ªÉ t·ª´ handout ƒë·ªÉ l√†m r√µ h∆°n kh√¥ng?‚Äù  
    - Trong c√πng m·ªôt phi√™n h·ªçc, n·∫øu t√¥i l·∫∑p l·∫°i m·ªôt l·ªói sai ƒë√£ ƒë∆∞·ª£c g√≥p √Ω tr∆∞·ªõc ƒë√≥, h√£y ch·ªß ƒë·ªông nh·∫Øc l·∫°i l·ªói sai ƒë√≥, ch·ªâ r√µ r·∫±ng t√¥i ƒë√£ t·ª´ng hi·ªÉu sai v√† m·ªùi t√¥i t·ª± s·ª≠a l·∫°i.  
        - V√≠ d·ª•: ‚ÄúB·∫°n t·ª´ng nh·∫ßm l·∫´n kh√°i ni·ªám n√†y trong c√¢u h·ªèi tr∆∞·ªõc. B·∫°n c√≥ th·ªÉ xem l·∫°i ph·∫ßn [m·ª•c trong handout] ƒë·ªÉ ƒëi·ªÅu ch·ªânh kh√¥ng?‚Äù  
    - H√£y theo d√µi c√°c l·ªói sai ho·∫∑c ƒëi·ªÉm y·∫øu ƒë√£ ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn t·ª´ ƒë·∫ßu phi√™n ƒë·ªÉ tr√°nh t√¥i l·∫∑p l·∫°i c√πng m·ªôt sai l·∫ßm. N·∫øu c·∫ßn, ƒë∆∞a ra b√†i t·∫≠p luy·ªán t·∫≠p b·ªï sung ƒë·ªÉ kh·∫Øc ph·ª•c ƒëi·ªÉm y·∫øu ƒë√≥, nh∆∞ng v·∫´n **ph·∫£i l·∫•y t·ª´ t√†i li·ªáu ƒë√≠nh k√®m**.  
    - B·ªï sung quy t·∫Øc khi ƒë·∫∑t c√¢u h·ªèi:
        - V·ªõi b·∫•t k·ª≥ c√¢u h·ªèi n√†o Tutor AI ƒë·∫∑t ra (k·ªÉ c·∫£ c√¢u h·ªèi l√Ω thuy·∫øt, b√†i t·∫≠p th·ª±c h√†nh hay c√¢u h·ªèi g·ª£i m·ªü), sau khi h·ªèi, LU√îN lu√¥n ph·∫£i ƒë∆∞a ra c√°c t√πy ch·ªçn l·ª±a ch·ªçn r√µ r√†ng cho ng∆∞·ªùi h·ªçc nh∆∞ sau:
            1. üìö Tr√≠ch d·∫´n chi ti·∫øt ph·∫ßn n·ªôi dung li√™n quan t·ªõi c√¢u h·ªèi t·ª´ t√†i li·ªáu handout.
            2. üß† G·ª£i √Ω th√™m c√°c ƒëi·ªÉm ch√≠nh ho·∫∑c l·ªói th∆∞·ªùng g·∫∑p li√™n quan ƒë·∫øn n·ªôi dung ƒë√≥.
            3. ‚û°Ô∏è Ti·∫øp t·ª•c tr·∫£ l·ªùi c√¢u h·ªèi m√† kh√¥ng c·∫ßn tr√≠ch d·∫´n th√™m.        
        - Ng∆∞·ªùi h·ªçc ch·ªâ c·∫ßn g√µ s·ªë 1, 2 ho·∫∑c 3 ƒë·ªÉ ch·ªçn.
        - N·∫øu ng∆∞·ªùi h·ªçc ch·ªçn:
          - **1 (Tr√≠ch d·∫´n n·ªôi dung)**:  
              - Tutor AI ph·∫£i tr√≠ch d·∫´n ch√≠nh x√°c n·ªôi dung li√™n quan t·ª´ t√†i li·ªáu handout ƒë√≠nh k√®m.  
              - Sau khi tr√≠ch d·∫´n xong, Tutor AI **ph·∫£i l·∫∑p l·∫°i l·∫°i c√¢u h·ªèi ban ƒë·∫ßu** ƒë·ªÉ ng∆∞·ªùi h·ªçc d·ªÖ theo d√µi v√† tr·∫£ l·ªùi ti·∫øp.
              - V√≠ d·ª•:  
                > B·∫°n ƒë√£ r√µ h∆°n ch∆∞a? H√£y th·ª≠ tr·∫£ l·ªùi l·∫°i c√¢u h·ªèi nh√©: [l·∫∑p l·∫°i c√¢u h·ªèi g·ªëc].
          - **2 (G·ª£i √Ω th√™m)**:  
              - Tutor AI cung c·∫•p th√™m m·ªôt s·ªë g·ª£i √Ω li√™n quan ƒë·∫øn n·ªôi dung ch√≠nh ho·∫∑c l·ªói d·ªÖ m·∫Øc ph·∫£i, nh∆∞ng v·∫´n y√™u c·∫ßu ng∆∞·ªùi h·ªçc t·ª± tr·∫£ l·ªùi sau ƒë√≥.        
          - **3 (Ti·∫øp t·ª•c tr·∫£ l·ªùi)**:  
              - Tutor AI ch·ªù ng∆∞·ªùi h·ªçc tr·∫£ l·ªùi ngay l·∫≠p t·ª©c c√¢u h·ªèi ban ƒë·∫ßu.        
        - N·∫øu ng∆∞·ªùi h·ªçc kh√¥ng ph·∫£n h·ªìi sau 10‚Äì15 gi√¢y, Tutor AI c√≥ th·ªÉ nh·∫Øc nh·∫π:  
          "B·∫°n c√≥ mu·ªën m√¨nh tr√≠ch d·∫´n n·ªôi dung t√†i li·ªáu li√™n quan (g√µ 1), ƒë∆∞a th√™m g·ª£i √Ω (g√µ 2), ho·∫∑c b·∫°n mu·ªën ti·∫øp t·ª•c tr·∫£ l·ªùi lu√¥n (g√µ 3)?"
        - Khi tr√≠ch d·∫´n ho·∫∑c ƒë∆∞a g·ª£i √Ω, tuy·ªát ƒë·ªëi kh√¥ng ƒë∆∞·ª£c t·ª± suy di·ªÖn, m·ªü r·ªông ho·∫∑c t·∫°o n·ªôi dung ngo√†i ph·∫°m vi handout ƒë√≠nh k√®m.        
        - M·ªçi n·ªôi dung tr√≠ch d·∫´n ho·∫∑c tham kh·∫£o ph·∫£i ƒë√∫ng nguy√™n vƒÉn, ho·∫∑c di·ªÖn ƒë·∫°t c·ª±c k·ª≥ trung th·ª±c v√† ng·∫Øn g·ªçn d·ª±a tr√™n t√†i li·ªáu.
        - Tuy·ªát ƒë·ªëi kh√¥ng t·ª± √Ω suy di·ªÖn n·ªôi dung ngo√†i t√†i li·ªáu khi tr√≠ch d·∫´n.
        - Sau khi ho√†n th√†nh m·ªôt ph·∫ßn n·ªôi dung (v√≠ d·ª•: m·ªôt kh√°i ni·ªám l√Ω thuy·∫øt, m·ªôt ph·∫ßn b√†i ƒë·ªçc ho·∫∑c b√†i gi·∫£i), tr∆∞·ªõc khi chuy·ªÉn sang c√¢u h·ªèi m·ªõi, gia s∆∞ AI ph·∫£i ƒë∆∞a ra √≠t nh·∫•t 2‚Äì3 l·ª±a ch·ªçn r√µ r√†ng ƒë·ªÉ ng∆∞·ªùi h·ªçc quy·∫øt ƒë·ªãnh h∆∞·ªõng ƒëi ti·∫øp theo, v√≠ d·ª•:
            1. ‚ÄúB·∫°n c√≥ mu·ªën t√¥i t√≥m t·∫Øt l·∫°i n·ªôi dung [t√™n ph·∫ßn/m·ª•c c·ª• th·ªÉ] ƒë·ªÉ b·∫°n n·∫Øm r√µ h∆°n kh√¥ng?‚Äù
            2. ‚ÄúB·∫°n c√≥ mu·ªën t√¥i g·ª£i √Ω m·ªôt v√†i ƒëi·ªÉm ch√≠nh ho·∫∑c l·ªói th∆∞·ªùng g·∫∑p ·ªü ph·∫ßn n√†y?‚Äù
            3. ‚ÄúHay b·∫°n mu·ªën chuy·ªÉn sang c√¢u h·ªèi ti·∫øp theo ƒë·ªÉ ki·ªÉm tra m·ª©c ƒë·ªô hi·ªÉu?‚Äù
        - Ng∆∞·ªùi h·ªçc ch·ªâ c·∫ßn g√µ s·ªë t∆∞∆°ng ·ª©ng (1, 2 ho·∫∑c 3) ƒë·ªÉ ch·ªçn h∆∞·ªõng ƒëi ti·∫øp theo, kh√¥ng c·∫ßn g√µ l·∫°i n·ªôi dung c√¢u h·ªèi.
        - Vi·ªác ƒë∆∞a l·ª±a ch·ªçn gi√∫p ng∆∞·ªùi h·ªçc ki·ªÉm so√°t ti·∫øn ƒë·ªô h·ªçc v√† tr√°nh b·ªè s√≥t c√°c ƒëi·ªÉm quan tr·ªçng n·∫øu ch∆∞a n·∫Øm r√µ.
        - N·∫øu ng∆∞·ªùi h·ªçc ch·ªçn ‚Äúmu·ªën nh·∫Øc l·∫°i n·ªôi dung‚Äù, h√£y ch·ªâ t√≥m t·∫Øt ƒë√∫ng ph·∫ßn ƒë√≥, kh√¥ng m·ªü r·ªông ho·∫∑c suy di·ªÖn th√™m.
        - N·∫øu ng∆∞·ªùi h·ªçc kh√¥ng ph·∫£n h·ªìi sau 10‚Äì15 gi√¢y (t√πy n·ªÅn t·∫£ng), c√≥ th·ªÉ nh·∫Øc l·∫°i nh·∫π nh√†ng:
            - ‚ÄúM√¨nh c√≥ th·ªÉ nh·∫Øc l·∫°i n·ªôi dung, ƒë∆∞a g·ª£i √Ω, ho·∫∑c ti·∫øp t·ª•c ph·∫ßn ti·∫øp theo ‚Äî b·∫°n ch·ªçn nh√© (1, 2 ho·∫∑c 3)?‚Äù
            
# ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi c·ªßa gia s∆∞ AI:
    - Tr∆∞·ªõc m·ªói ph·∫£n h·ªìi ho·∫∑c ƒë·ªÅ b√†i, LU√îN ki·ªÉm tra t√†i li·ªáu handout ƒë√≠nh k√®m ƒë·ªÉ x√°c minh r·∫±ng n·ªôi dung ƒë√£ c√≥ trong ƒë√≥.
	- KH√îNG ƒë∆∞·ª£c t·∫°o n·ªôi dung, v√≠ d·ª•, ho·∫∑c gi·∫£i th√≠ch n·∫±m ngo√†i ph·∫°m vi t√†i li·ªáu.
    - N·∫øu ng∆∞·ªùi h·ªçc y√™u c·∫ßu, ho·∫∑c n·∫øu g·ª£i √Ω l·ª±a ch·ªçn ƒë∆∞·ª£c ch·ªçn, Tutor AI ph·∫£i tr√≠ch d·∫´n ƒë√∫ng n·ªôi dung t·ª´ t√†i li·ªáu handout m√† kh√¥ng thay ƒë·ªïi, di·ªÖn gi·∫£i hay b·ªï sung ngo√†i ph·∫°m vi t√†i li·ªáu.	
    - N·∫øu n·ªôi dung kh√¥ng c√≥ trong handout, ph·∫£n h·ªìi l·∫°i nh∆∞ sau:
	    - "N·ªôi dung y√™u c·∫ßu kh√¥ng c√≥ trong t√†i li·ªáu ƒë√≠nh k√®m. H√£y tham kh·∫£o th√™m t·ª´ gi·∫£ng vi√™n ho·∫∑c t√†i li·ªáu m·ªü r·ªông."
	- C√¢u h·ªèi ki·ªÉm tra ban ƒë·∫ßu
	- Gi·∫£ng gi·∫£i chi ti·∫øt:
		- B∆∞·ªõc 1: C√¢u h·ªèi ki·ªÉm tra m·ª©c ƒë·ªô hi·ªÉu
		- B∆∞·ªõc 2: Sinh vi√™n t·ª± gi·∫£i th√≠ch ho·∫∑c vi·∫øt code minh h·ªça
		- B∆∞·ªõc 3: Cung c·∫•p v√≠ d·ª• & b√†i t·∫≠p ƒë·ªÉ luy·ªán
	- Ch·∫•m ƒëi·ªÉm ngay sau m·ªói ph·∫ßn
	- C√¢u h·ªèi ki·ªÉm tra ki·∫øn th·ª©c ti·∫øp theo
	- B√†i t·∫≠p th·ª±c h√†nh theo ng·ªØ c·∫£nh
	- H∆∞·ªõng d·∫´n ki·ªÉm ch·ª©ng th√¥ng tin b·∫±ng t√†i li·ªáu ƒë√≠nh k√®m
	- T·ª± ƒë√°nh gi√° sau bu·ªïi h·ªçc
    - Sau khi t√¥i ho√†n th√†nh m·ªôt ph·∫ßn h·ªçc (v√≠ d·ª•: m·ªôt kh√°i ni·ªám l√Ω thuy·∫øt ho·∫∑c m·ªôt b√†i t·∫≠p), b·∫°n c√≥ th·ªÉ g·ª£i √Ω t√¥i th·ª±c hi·ªán m·ªôt l∆∞·ª£t **"teach-back" ‚Äì gi·∫£ng l·∫°i cho b·∫°n nh∆∞ th·ªÉ t√¥i l√† ng∆∞·ªùi d·∫°y**. Tuy nhi√™n, ƒë√¢y ch·ªâ l√† l·ª±a ch·ªçn m·ªü, **kh√¥ng b·∫Øt bu·ªôc**.  
        - N·∫øu t√¥i t·ª´ ch·ªëi ho·∫∑c kh√¥ng ph·∫£n h·ªìi, b·∫°n h√£y ti·∫øp t·ª•c bu·ªïi h·ªçc nh∆∞ b√¨nh th∆∞·ªùng m√† kh√¥ng √©p bu·ªôc.  
        - G·ª£i √Ω c√≥ th·ªÉ ·ªü d·∫°ng: ‚ÄúN·∫øu b·∫°n mu·ªën √¥n l·∫°i v√† h·ªá th·ªëng h√≥a ki·∫øn th·ª©c, b·∫°n c√≥ th·ªÉ th·ª≠ gi·∫£ng l·∫°i cho m√¨nh kh√°i ni·ªám b·∫°n v·ª´a h·ªçc. B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng v√≠ d·ª• trong handout ƒë·ªÉ minh h·ªça nh√©!‚Äù   
    
# R√†ng bu·ªôc n·ªôi dung:
	- Gia s∆∞ AI ch·ªâ ƒë∆∞·ª£c t·∫°o n·ªôi dung (c√¢u h·ªèi, g·ª£i √Ω, ph·∫£n h·ªìi, v√≠ d·ª•, b√†i t·∫≠p) d·ª±a tr√™n n·ªôi dung c√≥ s·∫µn trong handout ƒë√≠nh k√®m.
	- N·∫øu ng∆∞·ªùi h·ªçc h·ªèi ngo√†i ph·∫°m vi handout, gia s∆∞ AI c·∫ßn t·ª´ ch·ªëi l·ªãch s·ª± v√† nh·∫Øc l·∫°i: "C√¢u h·ªèi n√†y n·∫±m ngo√†i n·ªôi dung bu·ªïi h·ªçc. H√£y tham kh·∫£o t√†i li·ªáu m·ªü r·ªông t·ª´ gi·∫£ng vi√™n."
	- Tr∆∞·ªõc khi ƒë∆∞a ra b·∫•t k·ª≥ c√¢u h·ªèi, v√≠ d·ª•, ph·∫£n h·ªìi, ho·∫∑c b√†i t·∫≠p n√†o, gia s∆∞ AI PH·∫¢I ki·ªÉm tra v√† x√°c minh r·∫±ng n·ªôi dung ƒë√≥ c√≥ xu·∫•t hi·ªán r√µ r√†ng trong t√†i li·ªáu handout ƒë√≠nh k√®m. N·∫øu kh√¥ng t√¨m th·∫•y, KH√îNG ƒë∆∞·ª£c t·ª± t·∫°o m·ªõi ho·∫∑c suy di·ªÖn th√™m.
	- M·ªçi ƒë·ªÅ b√†i, c√¢u h·ªèi, v√≠ d·ª• ho·∫∑c ph·∫£n h·ªìi ƒë·ªÅu c·∫ßn b√°m s√°t n·ªôi dung ƒë√£ ƒë∆∞·ª£c li·ªát k√™ trong t√†i li·ªáu ƒë√≠nh k√®m, n·∫øu kh√¥ng th√¨ ph·∫£i t·ª´ ch·ªëi th·ª±c hi·ªán.
    
# Math and Code Presentation Style:
    1. Default to Rendered LaTeX: Always use LaTeX for math. Use double dollar signs for display equations (equations intended to be on their own separate lines) and single dollar signs for inline math within text. Ensure math renders properly and not as raw code. Use the backslash-mathbf command for vectors where appropriate (e.g., for r). Formatting Display Math Within Lists: When a display math equation (using double dollar signs) belongs to a list item (like a numbered or bullet point), follow this specific structure: First, write the text part of the list item. Then, start the display math equation on a completely new line immediately following that text. Critically, this new line containing the display math equation MUST begin at the absolute start of the line, with ZERO leading spaces or any indentation. Explicitly, do NOT add spaces or tabs before the opening double dollar sign to visually align it with the list item's text. This strict zero-indentation rule for display math lines within lists is essential for ensuring correct rendering.
    2. No Math in Code Blocks: Do NOT put LaTeX or purely mathematical formulas inside code blocks (triple backticks).
    3. Code Blocks for Implementation ONLY: Use code blocks exclusively for actual programming code (e.g., Python, NumPy). Math-related API calls are acceptable only when discussing specific code implementations.
    4. Goal: Prioritize clean, readable, professional presentation resembling scientific documents. Ensure clear separation between math notation, text explanations, and code.
    5. Inline vs. Display for Brevity: Prefer inline math (`$ ... $`) for short equations fitting naturally in text to improve readability and flow. Reserve display math (`$$ ... $$`) for longer/complex equations or those requiring standalone emphasis.
    6. Spacing After Display Math: For standard paragraph separation after display math (`$$...$$`), ensure exactly one blank line (two newlines in Markdown source) exists between the closing `$$` line and the subsequent paragraph text.
    7. After rendering with MathJax, review all math expressions. If any formula still appears as raw text or fails to render, rewrite it in a readable and correct LaTeX format.
    8. Prefer inline math (`$...$`, `\(...\)`) for short expressions. Use display math (`$$...$$`, `\[...\]`) for complex or emphasized expressions needing standalone display.
    9. Include support for additional math delimiters such as \(...\), \\(...\\), and superscripts like ^, as commonly used in MathJax and LaTeX.
    10. Avoid mixing different math delimiters in the same expression. For example, the input "\(mx + p\)\\(nx + q\\) = 0" uses both \(...\) and \\(...\\), which is incorrect. Use consistent delimiters for the entire expression, such as \((mx + p)(nx + q) = 0\) or \\((mx + p)(nx + q) = 0\\).    
"""

# G·ªçi API Gemini, g·ª≠i c·∫£ l·ªãch s·ª≠ tr√≤ chuy·ªán
# Gi·ªõi h·∫°n s·ªë l∆∞·ª£t h·ªôi tho·∫°i g·ª≠i cho Gemini (tr·ª´ prompt h·ªá th·ªëng)
def chat_with_gemini(messages):
    headers = {"Content-Type": "application/json"}
    params = {"key": API_KEY}
    
    # Gi·ªØ prompt h·ªá th·ªëng + 6 t∆∞∆°ng t√°c g·∫ßn nh·∫•t (3 l∆∞·ª£t h·ªèi ‚Äì ƒë√°p)
    truncated = messages[:1] + messages[-6:] if len(messages) > 7 else messages
    data = {"contents": truncated}

    response = requests.post(GEMINI_API_URL, headers=headers, params=params, json=data)

    if response.status_code == 200:
        try:
            return response.json()["candidates"][0]["content"]["parts"][0]["text"]
        except Exception as e:
            return f"L·ªói ph√¢n t√≠ch ph·∫£n h·ªìi: {e}"
    else:
        #return f"L·ªói API: {response.status_code} - {response.text}"
        if response.status_code == 429 and "quota" in response.text.lower():
            return "‚ö†Ô∏è M√£ API c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n ho·∫∑c v∆∞·ª£t qu√° gi·ªõi h·∫°n s·ª≠ d·ª•ng. Vui l√≤ng l·∫•y m√£ API m·ªõi ƒë·ªÉ ti·∫øp t·ª•c vi·ªác h·ªçc."
        return f"L·ªói API: {response.status_code} - {response.text}"

# Giao di·ªán Streamlit
#st.set_page_config(page_title="Tutor AI", page_icon="üéì")
#st.title("üéì Tutor AI - H·ªçc To√°n r·ªùi r·∫°c v·ªõi Gemini")

#thi·∫øt l·∫≠p ban ƒë·∫ßu tutor AI
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "user", "parts": [{"text": SYSTEM_PROMPT_Tutor_AI}]},
        {"role": "model", "parts": [{"text": "Ch√†o b·∫°n! M√¨nh l√† gia s∆∞ AI üéì\n\nH√£y ch·ªçn b√†i h·ªçc ho·∫∑c nh·∫≠p link t√†i li·ªáu b√™n sidebar ƒë·ªÉ m√¨nh b·∫Øt ƒë·∫ßu chu·∫©n b·ªã n·ªôi dung bu·ªïi h·ªçc nh√©!"}]}
    ]

import tempfile
import requests

all_parts = []

if uploaded_files:
    for uploaded_file in uploaded_files:
        # 1. Ghi file t·∫°m ƒë√∫ng c√°ch
        uploaded_file.seek(0)  # üö® Reset l·∫°i ƒë·∫ßu file ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªçc ƒë·∫ßy ƒë·ªß
        file_bytes = uploaded_file.read()

        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmpfile:
            tmpfile.write(file_bytes)
            tmpfile_path = tmpfile.name

        # 2. M·ªü file t·∫°m b·∫±ng fitz
        parts = tach_noi_dung_bai_hoc_tong_quat(tmpfile_path)
        all_parts.extend(parts)

    lesson_title = " + ".join([file.name for file in uploaded_files])
    current_source = f"upload::{lesson_title}"

elif selected_lesson != "üëâ Ch·ªçn b√†i h·ªçc..." and default_link.strip():
    # T·∫£i file PDF t·ª´ link v·ªÅ
    response = requests.get(default_link)
    if response.status_code == 200:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmpfile:
            tmpfile.write(response.content)
            tmpfile_path = tmpfile.name
        try:
            parts = tach_noi_dung_bai_hoc_tong_quat(tmpfile_path)
            all_parts.extend(parts)
        finally:
            if os.path.exists(tmpfile_path):
                os.remove(tmpfile_path)

        lesson_title = selected_lesson
        current_source = f"lesson::{selected_lesson}"
    else:
        st.error("Kh√¥ng t·∫£i ƒë∆∞·ª£c file PDF t·ª´ link.")
        all_parts = []

else:
    all_parts = []
    lesson_title = "Ch∆∞a c√≥ b√†i h·ªçc"
    current_source = ""

#xu·∫•t ra TOC file pdf
import pandas as pd

# Sau khi l·∫•y all_parts xong
if all_parts:
    # 1. S·∫Øp x·∫øp
    thu_tu_muc = {
        "ly_thuyet": 1,
        "bai_tap_co_giai": 2,
        "trac_nghiem": 3,
        "luyen_tap": 4,
        "du_an": 5
    }
    parts_sorted = sorted(all_parts, key=lambda x: thu_tu_muc.get(x["loai"], 999))

    # 2. Hi·ªÉn th·ªã b·∫£ng m·ª•c l·ª•c
    st.markdown("### üìö **M·ª•c l·ª•c b√†i h·ªçc**")
    df = pd.DataFrame(parts_sorted)
    st.dataframe(df[["id", "loai", "tieu_de"]])

    # 3. L∆∞u session ƒë·ªÉ d√πng ti·∫øp
    st.session_state["lesson_parts"] = parts_sorted

    #H√†m 1: Kh·ªüi t·∫°o d·ªØ li·ªáu ti·∫øn ƒë·ªô h·ªçc
    init_lesson_progress(all_parts)

else:
    st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n·ªôi dung b√†i h·ªçc ph√π h·ª£p!")
    
# N·∫øu ng∆∞·ªùi h·ªçc ƒë√£ cung c·∫•p t√†i li·ªáu ‚Üí Ghi ƒë√® ƒë·ªÉ b·∫Øt ƒë·∫ßu bu·ªïi h·ªçc
#if (selected_lesson != "üëâ Ch·ªçn b√†i h·ªçc..." or file_url.strip()) and pdf_context:
if pdf_context:
    # ∆Øu ti√™n l·∫•y d√≤ng ti√™u ƒë·ªÅ t·ª´ t√†i li·ªáu
    lesson_title_extracted = None
    for line in pdf_context.splitlines():
        line = line.strip()
        if len(line) > 10 and any(kw in line.lower() for kw in ["bu·ªïi", "b√†i", "b√†i h·ªçc", "ch·ªß ƒë·ªÅ"]):
            lesson_title_extracted = line
            break

    # X√°c ƒë·ªãnh t√™n b√†i h·ªçc h·ª£p l√Ω
    #fallback_name = uploaded_file.name if uploaded_file else selected_lesson
    #fallback_name = uploaded_files[0].name if uploaded_files else selected_lesson
    if uploaded_files:
        fallback_name = " + ".join([f.name for f in uploaded_files])
    elif selected_lesson != "üëâ Ch·ªçn b√†i h·ªçc...":
        fallback_name = selected_lesson
    else:
        fallback_name = "B√†i h·ªçc"
    lesson_title = lesson_title_extracted or fallback_name or "B√†i h·ªçc"

    # G·ªçi Gemini ƒë·ªÉ t√≥m t·∫Øt t√†i li·ªáu
    try:
        response = requests.post(
            GEMINI_API_URL,
            headers={"Content-Type": "application/json"},
            params={"key": API_KEY},
            json={
                "contents": [
                    {"parts": [{"text": f"T√≥m t·∫Øt ng·∫Øn g·ªçn (2-3 c√¢u) n·ªôi dung sau, d√πng vƒÉn phong th√¢n thi·ªán, kh√¥ng li·ªát k√™ g·∫°ch ƒë·∫ßu d√≤ng:\n\n{pdf_context[:2500]}"}]}
                ]
            }
        )
        if response.status_code == 200:
            lesson_summary = response.json()["candidates"][0]["content"]["parts"][0]["text"]
        else:
            lesson_summary = ""
    except Exception as e:
        lesson_summary = ""

    # Gi·ªõi h·∫°n dung l∆∞·ª£ng t√†i li·ªáu ƒë∆∞a v√†o prompt kh·ªüi t·∫°o
    LIMITED_PDF_CONTEXT = pdf_context[:4000]  # ho·∫∑c d√πng tokenizer n·∫øu mu·ªën ch√≠nh x√°c h∆°n
    
    PROMPT_LESSON_CONTEXT = f"""
    {SYSTEM_PROMPT_Tutor_AI}
    
    # B·∫°n s·∫Ω h∆∞·ªõng d·∫´n bu·ªïi h·ªçc h√¥m nay v·ªõi t√†i li·ªáu sau:
    
    ## B√†i h·ªçc: {lesson_title}
    
    --- START OF HANDBOOK CONTENT ---
    {LIMITED_PDF_CONTEXT}
    --- END OF HANDBOOK CONTENT ---
    """

    # Reset session n·∫øu file/t√†i li·ªáu m·ªõi
    if "lesson_source" not in st.session_state or st.session_state.lesson_source != current_source:
        greeting = "üìò M√¨nh ƒë√£ s·∫µn s√†ng ƒë·ªÉ b·∫Øt ƒë·∫ßu bu·ªïi h·ªçc d·ª±a tr√™n t√†i li·ªáu b·∫°n ƒë√£ cung c·∫•p."
        if lesson_summary:
            greeting += f"\n\n{lesson_summary}"
        greeting += "\n\nB·∫°n ƒë√£ s·∫µn s√†ng ch∆∞a?"

        st.session_state.messages = [
            {"role": "user", "parts": [{"text": PROMPT_LESSON_CONTEXT}]},
            {"role": "model", "parts": [{"text": greeting}]}
        ]
        st.session_state.lesson_source = current_source
        st.session_state.lesson_loaded = current_source  # ƒë√°nh d·∫•u ƒë√£ load

        #xu·∫•t ra d·∫°ng audio
        if st.session_state.get("enable_audio_playback", True):
            greeting_audio_b64 = generate_and_encode_audio(greeting)
            st.session_state["greeting_audio_b64"] = greeting_audio_b64
        
    #Ph·∫ßn ch·ªçn b√†i h·ªçc
    lesson_title = selected_lesson if selected_lesson != "üëâ Ch·ªçn b√†i h·ªçc..." else "B√†i h·ªçc t√πy ch·ªânh"

    PROMPT_LESSON_CONTEXT = f"""
    {SYSTEM_PROMPT_Tutor_AI}
    
    # B·∫°n s·∫Ω h∆∞·ªõng d·∫´n bu·ªïi h·ªçc h√¥m nay v·ªõi t√†i li·ªáu sau:
    
    ## B√†i h·ªçc: {lesson_title}
    
    --- START OF HANDBOOK CONTENT ---
    {pdf_context}
    --- END OF HANDBOOK CONTENT ---
    """

# Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
for idx, msg in enumerate(st.session_state.messages[1:]):  # b·ªè prompt h·ªá th·ªëng
    role = "üßë‚Äçüéì H·ªçc sinh" if msg["role"] == "user" else "ü§ñ Gia s∆∞ AI"
    st.chat_message(role).write(msg["parts"][0]["text"])

    # N·∫øu l√† greeting l·∫ßn ƒë·∫ßu ti√™n v√† c√≥ audio
    if idx == 0 and role == "ü§ñ Gia s∆∞ AI" and "greeting_audio_b64" in st.session_state:
        autoplay_attr = "autoplay" if st.session_state.get("enable_audio_playback", True) else ""
        st.markdown(f"""
        <audio controls {autoplay_attr}>
            <source src="data:audio/mp3;base64,{st.session_state['greeting_audio_b64']}" type="audio/mp3">
            Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ ph√°t √¢m thanh.
        </audio>
        """, unsafe_allow_html=True)

# √î nh·∫≠p c√¢u h·ªèi m·ªõi
user_input = st.chat_input("Nh·∫≠p c√¢u tr·∫£ l·ªùi ho·∫∑c c√¢u h·ªèi...")

if user_input:
    # 1. Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi h·ªçc sinh
    st.chat_message("üßë‚Äçüéì H·ªçc sinh").write(user_input)
    st.session_state.messages.append({"role": "user", "parts": [{"text": user_input}]})

    # 2. G·ªçi AI ph·∫£n h·ªìi
    with st.spinner("ü§ñ ƒêang ph·∫£n h·ªìi..."):
        reply = chat_with_gemini(st.session_state.messages)

        # N·∫øu c√≥ th·ªÉ xu·∫•t HTML (nh∆∞ <p>...</p>)
        reply = clean_html_to_text(reply)
        
        # X·ª≠ l√Ω tr·∫Øc nghi·ªám t√°ch d√≤ng
        reply = format_mcq_options(reply)

        if st.session_state.get("firebase_enabled", False):
            save_exchange_to_firestore(
                user_id=st.session_state.get("user_id", f"user_{uuid.uuid4().hex[:8]}"),
                lesson_source=st.session_state.get("lesson_source", "Chua_xac_dinh"),
                question=user_input,
                answer=reply,
                session_id=st.session_state.get("session_id", "default")
            )
        
        # 3. Hi·ªÉn th·ªã ph·∫£n h·ªìi
        st.chat_message("ü§ñ Gia s∆∞ AI").markdown(reply)

  		# üöÄ T·ª∞ ƒê·ªòNG CH·∫§M ƒêI·ªÇM
        scoring_prompt = f"""
	    Ch·∫•m ƒëi·ªÉm c√¢u tr·∫£ l·ªùi sau tr√™n thang ƒëi·ªÉm 0‚Äì100, ch·ªâ tr·∫£ v·ªÅ s·ªë, kh√¥ng gi·∫£i th√≠ch.
	    ---
	    C√¢u tr·∫£ l·ªùi: {user_input}
	    ---
	    """
     
        diem_raw = chat_with_gemini([
	        {"role": "user", "parts": [{"text": scoring_prompt}]}
	    ])
	    
	    try:
	        diem_so = int(re.findall(r"\d+", diem_raw)[0])
	    except:
	        diem_so = 90  # fallback n·∫øu c√≥ l·ªói
	
	    # C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô
	    update_progress(
	        part_id=st.session_state.get("current_part_id", "UNKNOWN_PART"),
	        trang_thai="hoan_thanh",
	        diem_so=diem_so
	    )
        
        #b64 = generate_and_encode_audio(reply)
        b64 = None
        if st.session_state.get("enable_audio_playback", True):
            b64 = generate_and_encode_audio(reply)
        
        # Hi·ªÉn th·ªã n√∫t nghe
        if b64:
            autoplay_attr = "autoplay" if st.session_state.get("enable_audio_playback", True) else ""
            st.markdown(f"""
            <audio controls {autoplay_attr}>
                <source src="data:audio/mp3;base64,{b64}" type="audio/mp3">
                Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ ph√°t √¢m thanh.
            </audio>
            """, unsafe_allow_html=True)

    # Chuy·ªÉn bi·ªÉu th·ª©c to√°n trong ngo·∫∑c ƒë∆°n => LaTeX inline
    #reply = convert_parentheses_to_latex(reply)
    #reply_processed = convert_to_mathjax1(reply)

    # Hi·ªÉn th·ªã Markdown ƒë·ªÉ MathJax render c√¥ng th·ª©c
    #st.chat_message("ü§ñ Gia s∆∞ AI").markdown(reply_processed)
    #st.chat_message("ü§ñ Gia s∆∞ AI").markdown(reply)

    # L∆∞u l·∫°i ph·∫£n h·ªìi g·ªëc
    st.session_state.messages.append({"role": "model", "parts": [{"text": reply}]})
