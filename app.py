#my Gemini API: AIzaSyDEHqXQ87kY6WqGyiubv2x7a7hoN0qP9yY

import os
import streamlit as st
import requests
from dotenv import load_dotenv

# Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env (n·∫øu c√≥)
load_dotenv()

# L·∫•y API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
API_KEY = os.getenv("GEMINI_API_KEY")

# Ki·ªÉm tra n·∫øu API key kh√¥ng t·ªìn t·∫°i
if not API_KEY:
    st.error("‚ùå Kh√¥ng t√¨m th·∫•y API key. Vui l√≤ng ƒë·∫∑t GEMINI_API_KEY trong file .env ho·∫∑c bi·∫øn m√¥i tr∆∞·ªùng.")
    st.stop()

# ‚úÖ D√πng model t·ªët nh·∫•t hi·ªán t·∫°i (phi√™n b·∫£n m·ªõi v√† ·ªïn ƒë·ªãnh nh·∫•t c·ªßa Gemini 1.5 Pro)
GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1/models/gemini-1.5-pro-002:generateContent"

def call_gemini(prompt):
    headers = {
        "Content-Type": "application/json"
    }
    params = {
        "key": API_KEY
    }
    data = {
        "contents": [
            {
                "parts": [
                    {"text": prompt}
                ]
            }
        ]
    }

    response = requests.post(GEMINI_API_URL, headers=headers, params=params, json=data)

    if response.status_code == 200:
        try:
            return response.json()['candidates'][0]['content']['parts'][0]['text']
        except Exception as e:
            return f"L·ªói ph√¢n t√≠ch ph·∫£n h·ªìi: {e}"
    else:
        return f"L·ªói API: {response.status_code} - {response.text}"

# Giao di·ªán Streamlit
st.title("üß† AI Agent s·ª≠ d·ª•ng Gemini API")

user_input = st.text_area("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n:", height=150)

if st.button("G·ª≠i"):
    if user_input.strip() == "":
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p c√¢u h·ªèi!")
    else:
        with st.spinner("üîÑ ƒêang g·ª≠i ƒë·∫øn Gemini..."):
            response = call_gemini(user_input)
            st.success("‚úÖ Ph·∫£n h·ªìi t·ª´ Gemini:")
            st.write(response)

